#if UNITY_EDITOR
using System.IO;
using System.Text;
using Milease.Core;
using UnityEditor;

namespace Milease.Editor
{
    public static class ExpressionWarmUpGenerator
    {
        [MenuItem("Milease/Generate warming up script")]
        public static void Generate()
        {
            if (!EditorUtility.DisplayDialog("Milease",
                    $"Tracked {AnimatorExprManager.MetaData.Count} type(s), do you want to generate now?",
                    "Yes", "No"))
            {
                return;
            }

            var path = EditorUtility.SaveFilePanelInProject("Milease", "MileaseWarmUpper", "cs",
                "Generate warming up script");

            if (string.IsNullOrEmpty(path))
            {
                return;
            }

            var sb = new StringBuilder();
            sb.AppendLine(
@"// This file is generated by Milease automatically
using System.Diagnostics;
using Milease.Core;
using UnityEngine;
using Debug = UnityEngine.Debug;

public static class MileaseWarmUpper
{
    [RuntimeInitializeOnLoadMethod]
    public static void WarmUp()
    {
        var watch = new Stopwatch();
        watch.Start();");

            var template = "        AnimatorExprManager.WarmUp<{0}, {1}>(x => x.{2});";
            foreach (var meta in AnimatorExprManager.MetaData)
            {
                sb.AppendLine(string.Format(template, meta.TName, meta.EName, meta.MemberName));
            }
            
            sb.AppendLine(
@"        Debug.Log($""Completed Milease warming up in {watch.ElapsedMilliseconds}ms."");
    }
}");
            
            File.WriteAllText(path, sb.ToString());
            
            AssetDatabase.Refresh();
            AssetDatabase.ImportAsset(path);
        }
    }
}
#endif
