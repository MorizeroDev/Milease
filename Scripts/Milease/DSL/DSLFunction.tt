<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;
using Milease.Core;
using Milease.Core.Animation;
using Milease.Core.Animator;
using Milease.Enums;

namespace Milease.DSL
{
    public static partial class DSL
    {
<#
        var types = "In,Out,IO".Split(',');
        var functions = "Linear,Sine,Quad,Cubic,Quart,Quint,Expo,Circ,Back,Elastic,Bounce,Bezier"
                                    .Split(',');
        
        foreach (var function in functions)
        {
            foreach (var type in types)
            {
#>

        public static MilInstantAnimator M<#= function #><#= (type == "In" ? "" : type) #><T, E>(
            this T target, Expression<Func<T, E>> mbExpr, E from, E to)
        => generate(target, mbExpr, from.To(to), EaseType.<#= type #>, EaseFunction.<#= function #>);

        public static MilInstantAnimator M<#= function #><#= (type == "In" ? "" : type) #><T, E>(
            this T target, Expression<Func<T, E>> mbExpr, AniExpression<E> aniExpr)
        => generate(target, mbExpr, aniExpr, EaseType.<#= type #>, EaseFunction.<#= function #>);

<#

                if (function == "Linear")
                {
                    break;
                }
            }
        }
#>
    }
}
